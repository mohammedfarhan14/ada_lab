#include <stdio.h>
// #define N 8 // Change N to the desired board size
// c column
// r row
// b board
void Sol(int N, int b[N][N]) { for (int i = 0; i < N; i++) {
for (int j = 0; j < N; j++) printf("%d ", b[i][j]);
printf("\n");
}}
int isSafe(int N, int b[N][N], int r, int c) {
// Check for queens in the same column for (int i = 0; i < r; i++) {
if (b[i][c]) return 0;
}
// Check upper left diagonal
for (int i = r, j = c; i >= 0 && j >= 0; i--, j--) { if (b[i][j])
return 0;
}
// Check upper right diagonal
 
for (int i = r, j = c; i >= 0 && j < N; i--, j++) { if (b[i][j])
return 0;
}
return 1;
}
int solveNQueensUtil(int N, int b[N][N], int r) { int c;
if (r >= N) return 1;
for (c = 0; c < N; c++) { if (isSafe(N, b, r, c)) {
b[r][c] = 1;
if (solveNQueensUtil(N, b, r + 1)) return 1;
b[r][c] = 0; // Backtrack
}}
return 0;
}
int solveNQueens(int N) { int b[N][N], i = 0, j = 0; for(i = 0; i < N; i++){
for(j = 0; j < N; j++){ b[i][j] = 0;
}}
if (!solveNQueensUtil(N, b, 0)) { printf("Solution does not exist."); return 0;
}
Sol(N, b); return 1;
}
int main() { int N;
printf("Enter the size of the board\n"); scanf("%d", &N);
solveNQueens(N);
 return 0;
}